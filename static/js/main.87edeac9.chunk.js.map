{"version":3,"sources":["containers/GoogleMap.js","components/SearchBar.js","containers/ClinicContainer.js","containers/LoginContainer.js","components/NavBar.js","containers/Appointment.js","components/ClinicInfo.js","components/ApptForm.js","components/Welcome.js","App.js","serviceWorker.js","index.js"],"names":["MapContainer","renderClinics","array","props","listOfClinics","length","map","place","key","address_id","position","lat","latitude","lng","longitude","name","id","onClick","onMarkerClick","onMouseover","onHover","marker","state","activeMarker","visible","showingInfoWindow","to","setState","redirectTo","onMapClick","center","zoom","this","className","google","style","width","height","initialCenter","Component","GoogleApiWrapper","apiKey","process","SearchContainer","InputGroup","Prepend","Text","Form","Control","placeholder","onChange","updateSearch","ClinicContainer","searchTerm","handleSubmit","filteredSearch","GoogleMap","currentClinic","LoginContainer","title","onSubmit","userLogin","Group","controlId","Label","type","Button","variant","NavBar","Navbar","bg","expand","sticky","Brand","Toggle","aria-controls","Collapse","Nav","Link","user","logout","Appointment","renderUserAppointments","appts","appointments","clinics","i","push","Card","border","Body","Title","reason_for_visit","ListGroup","Item","appointment_date","appointment_time","value","deleteAppt","CardColumns","ClinicInfo","onBtnClick","newAppt","showSpecialities","Object","entries","specialities","filter","speciality","Jumbotron","action","address","city","zip","phoneNumber","website","newPatients","Accordion","Header","as","eventKey","Table","striped","bordered","hover","size","ApptForm","onFormSubmit","event","createAppt","submitted","clinic","Row","custom","rows","Welcome","renderLoginCard","App","fetchAPIData","forEach","healthCenter","isAccepting","attributes","coordinates","geometry","walk_in","toLowerCase","includes","limited_access","public_insurance","medicaid","medicare","private_employer_insurance","private_insurance","facility_type","child_special_needs","elderly","hiv","homeless","lgbt","intellect_disabled","physical_disabled","mental_illness","cardiology","endocrinology","general_surgery","hiv_aids","infectious_disease","nephrology","neurology","obstetrics","oncology","opthalmology","oral_surgery","orthopedic","gastroenterology","pediatrics","podiatry","pulmonary","rheumatology","reproductive_health","sti_test","urology","dentistry","phone_number","website_url","y","x","new_patients","addClinic","fetch","then","resp","json","obj","method","headers","body","JSON","stringify","target","filterClinicNames","renderClinicCont","renderAppointment","userClinics","renderClinicInfo","parseInt","match","params","find","accept_walkin","renderLogin","preventDefault","payload","username","children","password","error","console","log","alert","message","user_appts","appt","time","hour","slice","minutes","user_data","userId","user_clinics","reset","newUserCreate","userLogout","apptId","newUserClinics","newUserAppts","date","nativeEvent","clinicId","reason","appointment_hour","listOfCenters","features","exact","path","render","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.87edeac9.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {Map, Marker, InfoWindow, GoogleApiWrapper} from 'google-maps-react';\nimport {Redirect} from 'react-router-dom'\n\nconst apiKey= process.env.REACT_APP_GOOGLE_API_KEY\n\n\nexport class MapContainer extends Component {\n    constructor() {\n        super()\n        this.state = {\n            center: {\n                lat: 38.898074,\n                lng: -77.032864\n            },\n            zoom: 12,\n            activeMarker: null,\n            showingInfoWindow: false,\n            redirectTo: null\n        }\n    }\n\n\n    renderClinics = () => {\n        let array = this.props.listOfClinics\n        if (array.length !== 0) {\n            return array.map(place => {\n                return (\n                    <Marker\n                        key={place.address_id}\n                        position={{\n                            lat: place.latitude,\n                            lng: place.longitude\n                        }}\n                        name={place.name}\n                        id={place.id}\n                        onClick={this.onMarkerClick}\n                        onMouseover={this.onHover}\n                    >\n                        <InfoWindow\n                            key={`info-${place.address_id}`}\n                            marker={this.state.activeMarker}\n                            visible={this.state.showingInfoWindow}\n                            onClick={()=><Redirect to={`/clinics/${place.id}`}/>}\n                        >\n                            <div>\n                                <h1>{place.name}</h1>\n                            </div>\n                        </InfoWindow>\n                    </Marker>\n                )\n            }\n            )\n        } else {\n            return null\n        }\n    }\n\n    onHover = () => {\n        \n    }\n\n    onMarkerClick = (props, marker) => {\n        this.setState({\n            activeMarker: marker,\n            showingInfoWindow: true,\n            redirectTo: `/clinics/${props.id}`\n        })    \n    }\n    \n    onMapClick =() => {\n        if (this.state.showingInfoWindow) {\n            this.setState({\n                activeMarker: null,\n                showingInfoWindow: false\n            })\n        }\n    }\n\n    render() {\n        if (this.state.redirectTo !== null ) {\n            return <Redirect to={this.state.redirectTo}/>\n        } else {\n            return (\n                <div className=\"map\">\n                    <Map\n                        google={this.props.google}\n                        style={{\n                            position: 'fixed',  \n                            width: '100%',\n                            height: '100%'}}\n                        initialCenter={\n                            this.state.center\n                        }\n                        zoom={this.state.zoom}\n                        onClick={this.onMapClick}\n                    >\n                        {this.renderClinics()}\n                    </Map>\n                    </div>\n            )\n        }\n    }\n\n}\n\nexport default GoogleApiWrapper({\n    apiKey: apiKey\n  })(MapContainer)\n","import React, {Component} from 'react';\nimport InputGroup from 'react-bootstrap/InputGroup'\nimport Form from 'react-bootstrap/Form'\n\nexport default class SearchContainer extends Component {\n    render() {\n        return(\n            <div className='search-bar'>\n                <InputGroup className=\"mb-3\">\n                    <InputGroup.Prepend>\n                        <InputGroup.Text id=\"inputGroup-sizing-default\">Search by Name</InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <Form.Control\n                        placeholder={\"Start entering a name!\"}\n                        onChange={this.props.updateSearch}\n                    />\n                </InputGroup>\n            </div>\n        )\n    }\n}","import React, {Component} from 'react';\nimport GoogleMap from './GoogleMap';\nimport SearchBar from '../components/SearchBar'\n\nexport default class ClinicContainer extends Component {\n    render() {\n        return (\n            <div className=\"search-cont\">\n                <SearchBar\n                    searchTerm={this.props.searchTerm}\n                    updateSearch={this.props.updateSearch}\n                    handleSubmit={this.props.handleSubmit}\n                    filteredSearch={this.props.filteredSearch}\n                />\n                <GoogleMap\n                    listOfClinics={this.props.listOfClinics}\n                    currentClinic={this.props.currentClinic}\n                />\n            </div>\n        )\n    }\n}","import React, {Component} from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n\nexport default class LoginContainer extends Component {\n    render() {\n        return (\n            <div className=\"login-form\">\n                <h1>{this.props.title}</h1>\n                <Form onSubmit={this.props.userLogin}>\n                    <Form.Group controlId=\"formGroupUsername\">\n                        <Form.Label>Username</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"Enter username\" />\n                    </Form.Group>\n                    <Form.Group controlId=\"formGroupPassword\">\n                        <Form.Label>Password</Form.Label>\n                        <Form.Control type=\"password\" placeholder=\"Password\" />\n                    </Form.Group>\n                    <Button variant=\"primary\" type=\"submit\">\n                        Submit\n                    </Button>\n                </Form>\n            </div>\n        )\n    }\n}","import React, {Component} from 'react';\nimport Nav from 'react-bootstrap/Nav'\nimport Navbar from 'react-bootstrap/Navbar'\nimport {NavLink} from 'react-router-dom'\n\nexport default class NavBar extends Component {\n    render(){\n        return (\n            <div>\n                <Navbar bg=\"light\" variant=\"light\" expand=\"lg\" position=\"top\" sticky=\"top\">\n                    <Navbar.Brand>\n                        <NavLink className=\"link-text\" to='/'>\n                            HealthCheck\n                        </NavLink>\n                    </Navbar.Brand>\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\n                        <Nav className=\"mr-auto\">\n                            <Nav.Link>\n                                <NavLink className=\"link-text\" to='/search'>\n                                    Search\n                                </NavLink>\n                            </Nav.Link>\n                            {this.props.user ? <>\n                            <Nav.Link>\n                            <NavLink className=\"link-text\" to='/appointments'>\n                                Appointments\n                            </NavLink>\n                            </Nav.Link>\n                            <Nav.Link>\n                                <NavLink className=\"link-text\" onClick={this.props.logout} to='/login'>\n                                    Logout\n                                </NavLink>\n                            </Nav.Link> </> : <>\n                                <Nav.Link>\n                                    <NavLink className=\"link-text\" to='/login'>\n                                        Login\n                                    </NavLink>\n                                </Nav.Link>\n                                <Nav.Link>\n                                    <NavLink className=\"link-text\" to='/new'>\n                                        New User?\n                                    </NavLink>\n                                </Nav.Link>\n                            </>}\n                        </Nav>\n                    </Navbar.Collapse>\n                </Navbar>\n            </div>\n        )\n    }\n}\n\n\n","import React, {Component} from 'react';\nimport Button from 'react-bootstrap/Button'\nimport Card from 'react-bootstrap/Card'\nimport CardColumns from 'react-bootstrap/CardColumns'\nimport ListGroup from 'react-bootstrap/ListGroup'\n\nexport default class Appointment extends Component {\n\n    renderUserAppointments = () => {\n        let appts = this.props.appointments\n        let clinics = this.props.clinics\n        let array = []\n\n        for (let i = 0; i < appts.length; i++) {\n            array.push(\n                <>\n                <Card border='info' bg=\"secondary\">\n                    <Card.Body>\n                        <Card.Title>Clinic Name: {clinics[i].name}</Card.Title>\n                        <Card.Text>\n                            Reason for Visit: {appts[i].reason_for_visit}\n                        </Card.Text>\n                        <ListGroup className=\"list-group-flush\">\n                            <ListGroup.Item>Appointment Date: {appts[i].appointment_date}</ListGroup.Item>\n                            <ListGroup.Item>Appointment Time: {appts[i].appointment_time}</ListGroup.Item>\n                        </ListGroup>\n                        <Button type=\"submit\" value={appts[i].id} onClick={this.props.deleteAppt}>\n                            Delete    \n                        </Button>\n                    </Card.Body>\n                </Card>\n                </>\n            )\n        }\n        \n        return array\n    }\n\n    render() {\n        return(\n            <div>\n                <h1>Scheduled Appointments</h1>\n                <CardColumns>\n                    {this.renderUserAppointments()}\n                </CardColumns>\n            </div>\n        )\n    }\n}","import React, {Component} from 'react';\nimport Button from 'react-bootstrap/Button'\nimport {Redirect} from 'react-router-dom'\nimport Jumbotron from 'react-bootstrap/Jumbotron'\nimport ListGroup from 'react-bootstrap/ListGroup'\nimport Card from 'react-bootstrap/Card'\nimport Accordion from 'react-bootstrap/Accordion'\nimport Table from 'react-bootstrap/Table'\n\nexport default class ClinicInfo extends Component {\n    constructor() {\n        super();\n        this.state={\n            newAppt: false,\n            id: null\n        }\n    }\n\n    onBtnClick = () => {\n        this.setState({\n            newAppt: true,\n            id: this.props.id\n        })\n    }\n\n    showSpecialities = () => {\n        let array = Object.entries(this.props.specialities)\n        \n        let newArray = array.filter(speciality => {\n            if (speciality[1] !== false && speciality[1] !== null) {\n                if (speciality[1] === true){\n                    speciality[1] = \"Yes\"\n                }\n                return speciality\n            }\n        })\n        debugger\n\n        return newArray.map(speciality => {\n            return(\n                <tr>\n                    <td>\n                        {speciality[0]}\n                    </td>\n                    <td>\n                        {speciality[1]}\n                    </td>\n                </tr>\n            )\n        })\n    }\n\n    render() {\n        if (this.state.newAppt) {\n            return <Redirect to={`/appointment/new/${this.state.id}`}/>\n        } else {\n            return (\n                <div>\n                    <Jumbotron>\n                        <h1>\n                            {this.props.name}\n                        </h1>\n                        <ListGroup >\n                            <ListGroup.Item action>\n                                {`Address: ${this.props.address}, ${this.props.city}, ${this.props.state}, ${this.props.zip}`}\n                            </ListGroup.Item>\n                            <ListGroup.Item action>\n                                Phone Number: {this.props.phoneNumber}\n                            </ListGroup.Item>\n                            <ListGroup.Item action>\n                                Website: {this.props.website}\n                            </ListGroup.Item>\n                            <ListGroup.Item action>\n                                Accepting new patients?: {this.props.newPatients ? \"Yes\" : \"No\"}\n                            </ListGroup.Item>\n                        </ListGroup>\n                        <Accordion>\n                            <Card className=\"list-specialities\">\n                                <Card.Header>\n                                    <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\n                                        List of Specialities\n                                    </Accordion.Toggle>\n                                </Card.Header>\n                                <Accordion.Collapse eventKey=\"0\">\n                                    <Card.Body>\n                                        <Table striped bordered hover size=\"sm\">\n                                            {this.showSpecialities()}\n                                        </Table>\n                                    </Card.Body>\n                                </Accordion.Collapse>\n                            </Card>\n                        </Accordion>\n                        {(this.props.user && this.props.newPatients)? <Button variant='secondary' onClick={this.onBtnClick}>Create Appointment</Button> : null}\n                    </Jumbotron>\n                </div>\n            )\n        }\n    }\n}","import React, {Component} from 'react'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport {Redirect} from 'react-router-dom'\n\nexport default class ApptForm extends Component {\n    constructor(){\n        super();\n        this.state = {\n            submitted: false\n        }\n    }\n    \n    onFormSubmit = (event) => {\n        this.props.createAppt(event)\n        this.setState({submitted: true})\n        \n    }\n\n    render() {\n        if (this.state.submitted) {\n            return <Redirect to=\"/appointments\"/>\n        } else {    \n            return(\n                <div>\n                    <h1>{this.props.clinic.name}</h1>\n                    <Form onSubmit={this.onFormSubmit}>\n                        <Form.Group>\n                            <Form.Label>Appointment Date</Form.Label>\n                            <Form.Control id=\"date\" type=\"date\"/>\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Row>\n                                <Form.Label>Appointment Time</Form.Label>\n                                <Form.Control id=\"time\" as=\"select\" size=\"sm\" custom>\n                                    <option>8:00am</option>\n                                    <option>9:00am</option>\n                                    <option>10:00am</option>\n                                    <option>11:00am</option>\n                                    <option>12:00pm</option>\n                                    <option>1:00pm</option>\n                                    <option>2:00pm</option>\n                                    <option>3:00pm</option>\n                                    <option>4:00pm</option>\n                                    <option>5:00pm</option>\n                                    <option>6:00pm</option>\n                                </Form.Control>\n                            </Form.Row>\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Row>\n                                <Form.Label>Reason for Visit</Form.Label>\n                                <Form.Control as=\"textarea\" rows=\"3\" />\n                            </Form.Row>\n                        </Form.Group>\n                        <Button id={this.props.clinic.id} type=\"submit\">Submit</Button>\n                    </Form>\n                </div>\n            )\n        }\n    }\n}","import React, {Component} from 'react'\nimport Card from 'react-bootstrap/Card'\nimport Login from '../containers/LoginContainer'\n\nexport default class Welcome extends Component {\n    renderLoginCard = () => {\n        if (this.props.user) {\n            return null\n        } else {\n            return (\n                <Card border=\"secondary\" bg=\"dark\">\n                    <Login title={\"Login\"} userLogin={this.props.userLogin}/>\n                </Card>\n            )\n        }\n    }\n\n    render(){\n        return(\n            <div className='welcome-bg'>\n                <div className=\"welcome\">\n                    <h1>\n                        Welcome to HealthCheck!\n                    </h1>\n                    <h4>\n                        This is a resource dedicated to helping people find easy healthcare access in the DC-Metro area\n                    </h4>\n                </div>\n                <div className=\"login-card\">\n                    {this.renderLoginCard()}\n                </div>\n            </div>\n        )\n    }\n}","import React, {Component} from 'react';\nimport ClinicContainer from './containers/ClinicContainer'\nimport Login from './containers/LoginContainer'\nimport NavBar from './components/NavBar'\nimport Appointment from './containers/Appointment'\nimport ClinicInfo from './components/ClinicInfo'\nimport ApptForm from './components/ApptForm'\nimport Welcome from './components/Welcome'\nimport {Route, Switch, Redirect} from 'react-router-dom'\nimport './App.css';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      searchTerm: \"\",\n      user: null,\n      userId: null,\n      appointments: null,\n      userClinics: null,\n      listOfClinics: []\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://maps2.dcgis.dc.gov/dcgis/rest/services/DCGIS_DATA/Health_WebMercator/MapServer/7/query?where=1%3D1&outFields=*&outSR=4326&f=json')\n    .then(resp => resp.json())\n    .then(listOfCenters => this.fetchAPIData(listOfCenters.features))\n  }\n\n  fetchAPIData = (array) => {\n    array.forEach(healthCenter => {\n      let clinic = healthCenter.attributes\n      let coordinates = healthCenter.geometry\n      let isAccepting;\n      clinic[\"DCGIS.PRIMARY_CARE_INFO.ACCEPT_NEW_PT\"] === \"Yes\" ? isAccepting = true : isAccepting = false;\n\n      let walk_in = (clinic[\"PrimaryCarePt.WALKIN_UNSCHEDULED\"] !== null && clinic[\"PrimaryCarePt.WALKIN_UNSCHEDULED\"].toLowerCase().includes(\"yes\")) ? clinic[\"PrimaryCarePt.WALKIN_UNSCHEDULED\"] : \"No/Please Call\"\n\n      let limited_access = (clinic[\"DCGIS.PRIMARY_CARE_INFO.LIMITED_ACCESS\"] === \"No\" || clinic[\"DCGIS.PRIMARY_CARE_INFO.LIMITED_ACCESS\"] === \" \") ? \"No\" : clinic[\"DCGIS.PRIMARY_CARE_INFO.LIMITED_ACCESS\"]\n      \n      let public_insurance = (clinic[\"DCGIS.PRIMARY_CARE_INFO.PUBLIC_INSURANCE\"] !== null && clinic[\"DCGIS.PRIMARY_CARE_INFO.PUBLIC_INSURANCE\"].toLowerCase().includes(\"yes\")) ? \"Yes\" : \"No/Please Call\"\n      \n      let medicaid = (clinic[\"DCGIS.PRIMARY_CARE_INFO.MEDICAID\"] !== null && clinic[\"DCGIS.PRIMARY_CARE_INFO.MEDICAID\"].toLowerCase().includes(\"yes\")) ? \"Yes\" : \"No\"\n      \n      let medicare = (clinic[\"DCGIS.PRIMARY_CARE_INFO.MEDICARE\"] === \" \") ? \"No\" : clinic[\"DCGIS.PRIMARY_CARE_INFO.MEDICARE\"]\n      \n      let private_employer_insurance = (clinic[\"DCGIS.PRIMARY_CARE_INFO.PRIVATE_EMPLOYER_INSURANCE\"] === \" \") ? \"No\" : clinic[\"DCGIS.PRIMARY_CARE_INFO.PRIVATE_EMPLOYER_INSURANCE\"]\n      \n      let private_insurance = (clinic[\"DCGIS.PRIMARY_CARE_INFO.PRIVATE_INSURANCE\"] === \" \") ?\n      \"No\" : clinic[\"DCGIS.PRIMARY_CARE_INFO.PRIVATE_INSURANCE\"]\n\n      let facility_type = (clinic[\"DCGIS.PRIMARY_CARE_INFO.FACILITY_TYPE\"] === \" \") ? \"n/a\" : clinic[\"DCGIS.PRIMARY_CARE_INFO.FACILITY_TYPE\"]\n\n      //specialities\n      let child_special_needs = (clinic[\"DCGIS.PRIMARY_CARE_INFO.CHILD_SPECIAL_NEEDS\"] === \" \") ? false : true \n\n      let elderly = (clinic[\"DCGIS.PRIMARY_CARE_INFO.ELDERLY\"] === \" \") ? false : true\n\n      let hiv = (clinic[\"DCGIS.PRIMARY_CARE_INFO.HIV\"] === \" \") ? false : true\n\n      let homeless = (clinic[\"DCGIS.PRIMARY_CARE_INFO.HOMELESS\"] === \" \") ? false : true\n\n      let lgbt = (clinic[\"DCGIS.PRIMARY_CARE_INFO.LBGT\"] === \" \") ? false : true\n\n      let intellect_disabled = (clinic[\"DCGIS.PRIMARY_CARE_INFO.INTEL_DISABLED\"] === \" \") ? false : true\n\n      let physical_disabled = (clinic[\"DCGIS.PRIMARY_CARE_INFO.PHYSICALLY_DISABLED\"] === \" \") ? false : true\n\n      let mental_illness = (clinic[\"DCGIS.PRIMARY_CARE_INFO.MENTAL_ILLNESS\"] === \" \") ? false : true\n\n      let cardiology = (clinic[\"DCGIS.PRIMARY_CARE_INFO.CARDIOLOGY\"] === \" \") ? false : true\n\n      let endocrinology = (clinic[\"DCGIS.PRIMARY_CARE_INFO.ENDOCRINOLOGY\"] === \" \") ? false : true\n\n      let general_surgery = (clinic[\"DCGIS.PRIMARY_CARE_INFO.GENERAL_SURGERY\"] === \" \") ? false : true\n      \n      let hiv_aids = (clinic[\"DCGIS.PRIMARY_CARE_INFO.HIV_AIDS\"] === \" \") ? false : true\n      \n      let infectious_disease = (clinic[\"DCGIS.PRIMARY_CARE_INFO.INFECTIOUS_DISEASE\"] === \" \") ? false : true\n      \n      let nephrology = (clinic[\"DCGIS.PRIMARY_CARE_INFO.NEPHROLOGY\"] === \" \") ? false : true\n      \n      let neurology = (clinic[\"DCGIS.PRIMARY_CARE_INFO.NEUROLOGY\"] === \" \") ? false : true\n      \n      let obstetrics = (clinic[\"DCGIS.PRIMARY_CARE_INFO.OBSTETRICS\"] === \" \") ? false : true\n      \n      let oncology = (clinic[\"DCGIS.PRIMARY_CARE_INFO.ONCOLOGY\"] === \" \") ? false : true\n      \n      let opthalmology = (clinic[\"DCGIS.PRIMARY_CARE_INFO.OPTHALMOLOGY\"] === \" \") ? false : true\n      \n      let oral_surgery = (clinic[\"DCGIS.PRIMARY_CARE_INFO.ORAL_SURGERY\"] === \" \") ? false : true\n      \n      let orthopedic = (clinic[\"DCGIS.PRIMARY_CARE_INFO.ORTHOPEDIC\"] === \" \") ? false : true\n      \n      let gastroenterology = (clinic[\"DCGIS.PRIMARY_CARE_INFO.GASTROENTEROLOGY\"] === \" \") ? false : true\n      \n      let pediatrics = (clinic[\"DCGIS.PRIMARY_CARE_INFO.PEDIATRICS\"] === \" \") ? false : true\n      \n      let podiatry = (clinic[\"DCGIS.PRIMARY_CARE_INFO.PODIATRY\"] === \" \") ? false : true\n      \n      let pulmonary = (clinic[\"DCGIS.PRIMARY_CARE_INFO.PULMONARY_MEDICINE\"] === \" \") ? false : true\n      \n      let rheumatology = (clinic[\"DCGIS.PRIMARY_CARE_INFO.RHEUMATOLOGY\"] === \" \") ? false : true\n      \n      let reproductive_health = (clinic[\"DCGIS.PRIMARY_CARE_INFO.REPRODUCTIVE_HEALTH\"] === \" \") ? false : true\n      \n      let sti_test = (clinic[\"DCGIS.PRIMARY_CARE_INFO.STI_TEST_TREAT\"] === \" \") ? false : true\n      \n      let urology = (clinic[\"DCGIS.PRIMARY_CARE_INFO.UROLOGY\"] === \" \") ? false : true\n      \n      let dentistry = (clinic[\"DCGIS.PRIMARY_CARE_INFO.DENTISTRY\"] === \" \") ? false : true\n\n\n      let clinics = {\n        name: clinic[\"PrimaryCarePt.NAME\"],\n        address: clinic[\"PrimaryCarePt.ADDRESS\"],\n        city: clinic[\"PrimaryCarePt.CITY\"],\n        state: clinic[\"PrimaryCarePt.STATE\"],\n        zip: clinic[\"PrimaryCarePt.ZIP\"],\n        address_id: clinic[\"PrimaryCarePt.ADDRID\"],\n        phone_number: clinic[\"PrimaryCarePt.PHONE\"],\n        website_url: clinic[\"PrimaryCarePt.WEB_URL\"],\n        latitude: coordinates.y,\n        longitude: coordinates.x,\n        new_patients: isAccepting,\n\n        walk_in: walk_in,\n        limited_access: limited_access,\n        public_insurance: public_insurance,\n        medicaid: medicaid,\n        medicare: medicare,\n        private_employer_insurance: private_employer_insurance,\n        private_insurance: private_insurance,\n        facility_type: facility_type,\n\n\n        child_special_needs: child_special_needs,\n        elderly: elderly,\n        hiv: hiv,\n        homeless: homeless,\n        lgbt: lgbt,\n        intellect_disabled: intellect_disabled,\n        physical_disabled: physical_disabled,\n        mental_illness: mental_illness,\n        cardiology: cardiology,\n        endocrinology: endocrinology,\n        general_surgery: general_surgery,\n        hiv_aids: hiv_aids,\n        infectious_disease: infectious_disease,\n        nephrology: nephrology,\n        neurology: neurology,\n        obstetrics: obstetrics,\n        oncology: oncology,\n        opthalmology: opthalmology,\n        oral_surgery: oral_surgery,\n        orthopedic: orthopedic,\n        gastroenterology: gastroenterology,\n        pediatrics: pediatrics,\n        podiatry: podiatry,\n        pulmonary: pulmonary,\n        rheumatology: rheumatology,\n        reproductive_health: reproductive_health,\n        sti_test: sti_test,\n        urology: urology,\n        dentistry: dentistry\n      }\n      \n      this.addClinic(clinics)\n    })\n\n    fetch('https://healthcheck-backendpage.herokuapp.com/clinics')\n    .then(resp=>resp.json())\n    .then(array=>{\n      array.forEach(clinic => {\n        this.setState({\n          listOfClinics: [...this.state.listOfClinics, clinic]\n        })\n      })\n    })\n  }\n\n  addClinic = (obj) => {\n    fetch('https://healthcheck-backendpage.herokuapp.com/clinics', {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(obj)\n      }\n    )\n  }\n\n  updateSearch = (event) => {\n    this.setState({\n      searchTerm: event.target.value\n    })\n  }\n\n  filterClinicNames = () => {\n    return this.state.listOfClinics.filter(clinic =>\n      clinic.name.toLowerCase().includes(this.state.searchTerm.toLowerCase())\n    )\n  }\n\n  renderClinicCont = () => {\n    return (\n      <div>\n        <ClinicContainer\n          listOfClinics={this.filterClinicNames()}\n          searchTerm={this.state.searchTerm}\n          updateSearch={this.updateSearch}\n          handleSubmit={this.handleSubmit}\n          currentClinic={this.state.currentClinic}\n          filteredSearch={this.filteredSearch}\n        />\n      </div>\n    )\n  }\n\n  renderAppointment = () => {\n    if (this.state.user) {\n      return (\n        <div>\n          <Appointment\n            appointments={this.state.appointments}\n            clinics={this.state.userClinics}\n            deleteAppt={this.deleteAppt}\n          />\n        </div>\n      )\n    }\n  }\n\n  renderClinicInfo = (props) => {\n\n    let id = parseInt(props.match.params.id)\n    let clinic = this.state.listOfClinics.find(clinic => clinic.id === id)\n\n    let name = clinic.name\n    let address = clinic.address\n    let city = clinic.city\n    let state = clinic.state\n    let zip = clinic.zip\n    let phoneNumber = clinic.phone_number\n    let website = clinic.website_url\n    let newPatients = clinic.new_patients\n\n    let specialities = {\n      \"Accepting Walk-ins?: \": clinic.accept_walkin,\n      \"Limited Access to: \": clinic.limited_access,\n      \"Accepts Public Insurance?: \": clinic.public_insurance,\n      \"Accepts Medicaid?: \": clinic.medicaid,\n      \"Accepts Medicare?: \": clinic.medicare,\n      \"Accepts Private Insurance?: \": clinic.private_insurance,\n      \"Accepts Private Employer Insurance?: \": clinic.private_employer_insurance,\n      \"Facility Type: \": clinic.facility_type,\n\n      \"Child Special Needs?: \": clinic.child_special_needs,\n      \"Elderly: \": clinic.elderly,\n      \"HIV Testing: \": clinic.hiv,\n      \"Homeless Care: \": clinic.homeless,\n      \"LGBT Friendly: \": clinic.lgbt,\n      \"Intellectually Disabled Care: \": clinic.intellect_disabled,\n      \"Physically Disabled Care: \": clinic.physical_disabled,\n      \"Mental Illness: \": clinic.mental_illness,\n      \"Cardiology: \": clinic.cardiology,\n      \"Endocrinology: \": clinic.endocrinology,\n      \"General Surgery: \": clinic.general_surgery,\n      \"HIV/AIDS Treatment: \": clinic.hiv_aids,\n      \"Infectious Disease Care\": clinic.infectious_disease,\n      \"Nephrology: \": clinic.nephrology,\n      \"Neurology: \": clinic.neurology,\n      \"Obstetrics: \": clinic.obstetrics,\n      \"Oncology: \": clinic.oncology,\n      \"Opthalmology: \": clinic.opthalmology,\n      \"Oral Surgery\": clinic.oral_surgery,\n      \"Orthopedic: \": clinic.orthopedic,\n      \"Gastroenterology: \": clinic.gastroenterology,\n      \"Pediatrics: \": clinic.pediatrics,\n      \"Podiatry: \": clinic.podiatry,\n      \"Pulmonary Medicine: \": clinic.pulmonary,\n      \"Rheumatology: \": clinic.rheumatology,\n      \"Reproductive Health: \": clinic.reproductive_health,\n      \"STI Testing/Treatment: \": clinic.sti_test,\n      \"Urology: \": clinic.urology,\n      \"Dentistry: \": clinic.dentistry\n    }\n\n    return <ClinicInfo\n      name={name}\n      address={address}\n      city={city}\n      state={state}\n      zip={zip}\n      phoneNumber={phoneNumber}\n      website={website}\n      newPatients={newPatients}\n      id={id}\n      user={this.state.user}\n      specialities={specialities}/>\n  }\n\n  renderLogin = () => {\n    if (!this.state.user || this.state.user === null) {\n      return (\n        <div className=\"login\" >\n          <Login userLogin={this.userLogin} title=\"Login\"/>\n        </div>\n      )\n    } else {\n      return(\n        <Redirect to=\"/search\"/>\n      )\n    }\n  }\n\n  userLogin = (event) => {\n    event.preventDefault()\n    let name = event.target.children[0].children[1].value\n    let pw = event.target.children[1].children[1].value\n    let payload = {\n      username: name,\n      password: pw\n    }\n\n    fetch('https://healthcheck-backendpage.herokuapp.com/login', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(payload)\n    })\n    .then(resp => resp.json())\n    .then(obj => {\n      if (obj.error === true) {\n        console.log(\"error\")\n        alert(obj.message)\n      } else {\n\n        obj.user_appts.forEach(appt => {\n          let time = appt.appointment_time\n          let hour = parseInt(time.slice(0,2))\n          let minutes = time.slice(2,5)\n          if (hour === 0 || hour === 24) {\n            appt.appointment_time = `12${minutes}am`\n          } else if (hour === 12) {\n            appt.appointment_time = `12${minutes}pm`\n          } else if (hour > 0 && hour < 12) {\n              if (hour < 10) {\n                appt.appointment_time = `0${hour}${minutes}am`\n              } else {\n                appt.appointment_time = `${hour}${minutes}am`\n              }\n          } else if (hour > 12 && hour < 24) {\n            appt.appointment_time = `${hour}${minutes}pm`\n          }\n        })\n\n        console.log(\"success\");\n        this.setState({\n          user: obj.user_data.username,\n          userId: obj.user_data.id,\n          appointments: obj.user_appts,\n          userClinics: obj.user_clinics\n        })\n      }\n    })\n\n    event.target.reset()\n  }\n\n  newUserCreate = (event) => {\n    event.preventDefault()\n    let name = event.target.children[0].children[1].value\n    let pw = event.target.children[1].children[1].value\n    let payload = {\n      username: name,\n      password: pw\n    }\n\n    fetch('https://healthcheck-backendpage.herokuapp.com/users', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(payload)\n    })\n    .then(resp => resp.json())\n    .then(obj => {\n      if (obj.error === true) {\n        console.log(\"error\")\n        alert(obj.message)\n      } else {\n        console.log(\"success\");\n\n        this.setState({\n          user: obj.user_data.username,\n          userId: obj.user_data.id,\n          appointments: obj.user_appts,\n          userClinics: obj.user_clinics\n        })\n      }\n    })\n\n    event.target.reset()\n  }\n\n  userLogout = (event) => {\n    this.setState({\n      user: null,\n      appointments: null,\n      userClinics: null\n    })\n    \n  }\n  \n  deleteAppt = (event) => {\n    let apptId = parseInt(event.target.value)\n    let appt = this.state.appointments.find(appt => appt.id === apptId)\n    fetch(`https://healthcheck-backendpage.herokuapp.com/appointments/${apptId}`, {\n      method: \"DELETE\",\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(appt)\n    }).then(resp=>resp.json())\n    .then(json=>{\n      if (json.error) {\n        alert(json.message)\n      } else {\n        let newUserClinics= this.state.userClinics.filter(clinics=> clinics.id !== json.clinic.id)\n        let newUserAppts = this.state.appointments.filter(appts=> appts.id !== appt.id)\n\n        this.setState({\n          userClinics: newUserClinics,\n          appointments: newUserAppts\n        })\n      }\n    })\n  }\n\n  createAppt = (event) => {\n    let date = event.nativeEvent.target[0].value\n    let hour = event.nativeEvent.target[1].value.slice(-2)\n    let time = event.nativeEvent.target[1].value.slice(0,-2)\n    let clinicId = parseInt(event.target.children[3].id)\n    let reason = event.nativeEvent.target[2].value\n\n    let payload = {\n      user: this.state.userId,\n      clinic: clinicId,\n      appointment_date: date,\n      appointment_hour: hour,\n      appointment_time: time,\n      reason_for_visit: reason\n    }\n    \n    fetch('https://healthcheck-backendpage.herokuapp.com/appointments', {\n      method: \"POST\",\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(payload)\n    }).then(resp=>resp.json())\n    .then(obj=>{\n      if (obj.error) {\n        alert(obj.message)\n      } else {\n        this.setState({\n          appointments: obj.user_data.user_appts,\n          userClinics: obj.user_data.user_clinics\n        })\n      }\n    })\n\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <NavBar\n          user={this.state.user}\n          logout={this.userLogout}\n        />\n        <Switch>\n          <Route key=\"new\" exact path =\"/new\" render={() => {\n            if (this.state.user) {\n              return <Redirect to='/search'/>\n            } else {\n              return (\n              <div className=\"signup\">\n                <Login userLogin={this.newUserCreate} title=\"Create a New User\"/>\n              </div>\n              )\n            }\n          }}/>\n          <Route exact path=\"/appointment/new/:id\" render={(props) => {\n            let id = parseInt(props.match.params.id)\n            let clinic = this.state.listOfClinics.find(clinic => clinic.id === id)\n            return <ApptForm\n              clinic={clinic}\n              createAppt={this.createAppt}/>\n          }}/>\n          <Route exact path=\"/search\" render={() =>\n            this.renderClinicCont()\n          }/>\n          <Route exact path=\"/appointments\" render={() =>\n            this.renderAppointment()\n          }/>\n          <Route exact path=\"/clinics/:id\" render={(props) =>\n            this.renderClinicInfo(props)\n          }/>\n          <Route key=\"login\" exact path=\"/login\" render={() =>\n            this.renderLogin()\n          }/>\n          <Route path='/' render={() => {\n            return <Welcome user={this.state.user} userLogin={this.userLogin}/>\n          }}/>\n        </Switch>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router} from 'react-router-dom'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}